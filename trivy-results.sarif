{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0-rtm.5.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Trivy Vulnerability Scanner",
          "informationUri": "https://github.com/aquasecurity/trivy",
          "name": "Trivy",
          "rules": [
            {
              "id": "CVE-2022-1304",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "e2fsprogs: out-of-bounds read/write via crafted filesystem"
              },
              "fullDescription": {
                "text": "An out-of-bounds read/write vulnerability was found in e2fsprogs 1.46.5. This issue leads to a segmentation fault and possibly arbitrary code execution via a specially crafted filesystem."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-1304",
              "help": {
                "text": "Vulnerability CVE-2022-1304\nSeverity: HIGH\nPackage: libcom_err\nFixed Version: 1.46.6-r0\nLink: [CVE-2022-1304](https://avd.aquasec.com/nvd/cve-2022-1304)\nAn out-of-bounds read/write vulnerability was found in e2fsprogs 1.46.5. This issue leads to a segmentation fault and possibly arbitrary code execution via a specially crafted filesystem.",
                "markdown": "**Vulnerability CVE-2022-1304**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libcom_err|1.46.6-r0|[CVE-2022-1304](https://avd.aquasec.com/nvd/cve-2022-1304)|\n\nAn out-of-bounds read/write vulnerability was found in e2fsprogs 1.46.5. This issue leads to a segmentation fault and possibly arbitrary code execution via a specially crafted filesystem."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-3996",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: double locking leads to denial of service"
              },
              "fullDescription": {
                "text": "If an X.509 certificate contains a malformed policy constraint and policy processing is enabled, then a write lock will be taken twice recursively. On some operating systems (most widely: Windows) this results in a denial of service when the affected process hangs. Policy processing being enabled on a publicly facing server is not considered to be a common setup. Policy processing is enabled by passing the `-policy\u0026#39; argument to the command line utilities or by calling either `X509_VERIFY_PARAM_add0_policy()\u0026#39; or `X509_VERIFY_PARAM_set1_policies()\u0026#39; functions."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-3996",
              "help": {
                "text": "Vulnerability CVE-2022-3996\nSeverity: HIGH\nPackage: libssl3\nFixed Version: 3.0.7-r2\nLink: [CVE-2022-3996](https://avd.aquasec.com/nvd/cve-2022-3996)\nIf an X.509 certificate contains a malformed policy constraint and policy processing is enabled, then a write lock will be taken twice recursively. On some operating systems (most widely: Windows) this results in a denial of service when the affected process hangs. Policy processing being enabled on a publicly facing server is not considered to be a common setup. Policy processing is enabled by passing the `-policy' argument to the command line utilities or by calling either `X509_VERIFY_PARAM_add0_policy()' or `X509_VERIFY_PARAM_set1_policies()' functions.",
                "markdown": "**Vulnerability CVE-2022-3996**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libssl3|3.0.7-r2|[CVE-2022-3996](https://avd.aquasec.com/nvd/cve-2022-3996)|\n\nIf an X.509 certificate contains a malformed policy constraint and policy processing is enabled, then a write lock will be taken twice recursively. On some operating systems (most widely: Windows) this results in a denial of service when the affected process hangs. Policy processing being enabled on a publicly facing server is not considered to be a common setup. Policy processing is enabled by passing the `-policy' argument to the command line utilities or by calling either `X509_VERIFY_PARAM_add0_policy()' or `X509_VERIFY_PARAM_set1_policies()' functions."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-4450",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: double free after calling PEM_read_bio_ex"
              },
              "fullDescription": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and decodes the \u0026#34;name\u0026#34; (e.g. \u0026#34;CERTIFICATE\u0026#34;), any header data and the payload data. If the function succeeds then the \u0026#34;name_out\u0026#34;, \u0026#34;header\u0026#34; and \u0026#34;data\u0026#34; arguments are populated with pointers to buffers containing the relevant decoded data. The caller is responsible for freeing those buffers. It is possible to construct a PEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex() will return a failure code but will populate the header argument with a pointer to a buffer that has already been freed. If the caller also frees this buffer then a double free will occur. This will most likely lead to a crash. This could be exploited by an attacker who has the ability to supply malicious PEM files for parsing to achieve a denial of service attack. The functions PEM_read_bio() and PEM_read() are simple wrappers around PEM_read_bio_ex() and therefore these functions are also directly affected. These functions are also called indirectly by a number of other OpenSSL functions including PEM_X509_INFO_read_bio_ex() and SSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal uses of these functions are not vulnerable because the caller does not free the header argument if PEM_read_bio_ex() returns a failure code. These locations include the PEM_read_bio_TYPE() functions as well as the decoders introduced in OpenSSL 3.0. The OpenSSL asn1parse command line application is also impacted by this issue."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-4450",
              "help": {
                "text": "Vulnerability CVE-2022-4450\nSeverity: HIGH\nPackage: libssl3\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4450](https://avd.aquasec.com/nvd/cve-2022-4450)\nThe function PEM_read_bio_ex() reads a PEM file from a BIO and parses and decodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data. If the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are populated with pointers to buffers containing the relevant decoded data. The caller is responsible for freeing those buffers. It is possible to construct a PEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex() will return a failure code but will populate the header argument with a pointer to a buffer that has already been freed. If the caller also frees this buffer then a double free will occur. This will most likely lead to a crash. This could be exploited by an attacker who has the ability to supply malicious PEM files for parsing to achieve a denial of service attack. The functions PEM_read_bio() and PEM_read() are simple wrappers around PEM_read_bio_ex() and therefore these functions are also directly affected. These functions are also called indirectly by a number of other OpenSSL functions including PEM_X509_INFO_read_bio_ex() and SSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal uses of these functions are not vulnerable because the caller does not free the header argument if PEM_read_bio_ex() returns a failure code. These locations include the PEM_read_bio_TYPE() functions as well as the decoders introduced in OpenSSL 3.0. The OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "**Vulnerability CVE-2022-4450**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libssl3|3.0.8-r0|[CVE-2022-4450](https://avd.aquasec.com/nvd/cve-2022-4450)|\n\nThe function PEM_read_bio_ex() reads a PEM file from a BIO and parses and decodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data. If the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are populated with pointers to buffers containing the relevant decoded data. The caller is responsible for freeing those buffers. It is possible to construct a PEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex() will return a failure code but will populate the header argument with a pointer to a buffer that has already been freed. If the caller also frees this buffer then a double free will occur. This will most likely lead to a crash. This could be exploited by an attacker who has the ability to supply malicious PEM files for parsing to achieve a denial of service attack. The functions PEM_read_bio() and PEM_read() are simple wrappers around PEM_read_bio_ex() and therefore these functions are also directly affected. These functions are also called indirectly by a number of other OpenSSL functions including PEM_X509_INFO_read_bio_ex() and SSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal uses of these functions are not vulnerable because the caller does not free the header argument if PEM_read_bio_ex() returns a failure code. These locations include the PEM_read_bio_TYPE() functions as well as the decoders introduced in OpenSSL 3.0. The OpenSSL asn1parse command line application is also impacted by this issue."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-0215",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: use-after-free following BIO_new_NDEF"
              },
              "fullDescription": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming ASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications. The function receives a BIO from the caller, prepends a new BIO_f_asn1 filter BIO onto the front of it to form a BIO chain, and then returns the new head of the BIO chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter BIO is freed and the function returns a NULL result indicating a failure. However, in this case, the BIO chain is not properly cleaned up and the BIO passed by the caller still retains internal pointers to the previously freed filter BIO. If the caller then goes on to call BIO_pop() on the BIO then a use-after-free will occur. This will most likely result in a crash. This scenario occurs directly in the internal function B64_write_ASN1() which may cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on the BIO. This internal function is in turn called by the public API functions PEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream, SMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7. Other public API functions that may be impacted by this include i2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and i2d_PKCS7_bio_stream. The OpenSSL cms and smime command line applications are similarly affected."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-0215",
              "help": {
                "text": "Vulnerability CVE-2023-0215\nSeverity: HIGH\nPackage: libssl3\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0215](https://avd.aquasec.com/nvd/cve-2023-0215)\nThe public API function BIO_new_NDEF is a helper function used for streaming ASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications. The function receives a BIO from the caller, prepends a new BIO_f_asn1 filter BIO onto the front of it to form a BIO chain, and then returns the new head of the BIO chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter BIO is freed and the function returns a NULL result indicating a failure. However, in this case, the BIO chain is not properly cleaned up and the BIO passed by the caller still retains internal pointers to the previously freed filter BIO. If the caller then goes on to call BIO_pop() on the BIO then a use-after-free will occur. This will most likely result in a crash. This scenario occurs directly in the internal function B64_write_ASN1() which may cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on the BIO. This internal function is in turn called by the public API functions PEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream, SMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7. Other public API functions that may be impacted by this include i2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and i2d_PKCS7_bio_stream. The OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "**Vulnerability CVE-2023-0215**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libssl3|3.0.8-r0|[CVE-2023-0215](https://avd.aquasec.com/nvd/cve-2023-0215)|\n\nThe public API function BIO_new_NDEF is a helper function used for streaming ASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications. The function receives a BIO from the caller, prepends a new BIO_f_asn1 filter BIO onto the front of it to form a BIO chain, and then returns the new head of the BIO chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter BIO is freed and the function returns a NULL result indicating a failure. However, in this case, the BIO chain is not properly cleaned up and the BIO passed by the caller still retains internal pointers to the previously freed filter BIO. If the caller then goes on to call BIO_pop() on the BIO then a use-after-free will occur. This will most likely result in a crash. This scenario occurs directly in the internal function B64_write_ASN1() which may cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on the BIO. This internal function is in turn called by the public API functions PEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream, SMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7. Other public API functions that may be impacted by this include i2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and i2d_PKCS7_bio_stream. The OpenSSL cms and smime command line applications are similarly affected."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-0216",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: invalid pointer dereference in d2i_PKCS7 functions"
              },
              "fullDescription": {
                "text": "An invalid pointer dereference on read can be triggered when an application tries to load malformed PKCS7 data with the d2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions. The result of the dereference is an application crash which could lead to a denial of service attack. The TLS implementation in OpenSSL does not call this function however third party applications might call these functions on untrusted data."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-0216",
              "help": {
                "text": "Vulnerability CVE-2023-0216\nSeverity: HIGH\nPackage: libssl3\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0216](https://avd.aquasec.com/nvd/cve-2023-0216)\nAn invalid pointer dereference on read can be triggered when an application tries to load malformed PKCS7 data with the d2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions. The result of the dereference is an application crash which could lead to a denial of service attack. The TLS implementation in OpenSSL does not call this function however third party applications might call these functions on untrusted data.",
                "markdown": "**Vulnerability CVE-2023-0216**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libssl3|3.0.8-r0|[CVE-2023-0216](https://avd.aquasec.com/nvd/cve-2023-0216)|\n\nAn invalid pointer dereference on read can be triggered when an application tries to load malformed PKCS7 data with the d2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions. The result of the dereference is an application crash which could lead to a denial of service attack. The TLS implementation in OpenSSL does not call this function however third party applications might call these functions on untrusted data."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-0217",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: NULL dereference validating DSA public key"
              },
              "fullDescription": {
                "text": "An invalid pointer dereference on read can be triggered when an application tries to check a malformed DSA public key by the EVP_PKEY_public_check() function. This will most likely lead to an application crash. This function can be called on public keys supplied from untrusted sources which could allow an attacker to cause a denial of service attack. The TLS implementation in OpenSSL does not call this function but applications might call the function if there are additional security requirements imposed by standards such as FIPS 140-3."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-0217",
              "help": {
                "text": "Vulnerability CVE-2023-0217\nSeverity: HIGH\nPackage: libssl3\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0217](https://avd.aquasec.com/nvd/cve-2023-0217)\nAn invalid pointer dereference on read can be triggered when an application tries to check a malformed DSA public key by the EVP_PKEY_public_check() function. This will most likely lead to an application crash. This function can be called on public keys supplied from untrusted sources which could allow an attacker to cause a denial of service attack. The TLS implementation in OpenSSL does not call this function but applications might call the function if there are additional security requirements imposed by standards such as FIPS 140-3.",
                "markdown": "**Vulnerability CVE-2023-0217**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libssl3|3.0.8-r0|[CVE-2023-0217](https://avd.aquasec.com/nvd/cve-2023-0217)|\n\nAn invalid pointer dereference on read can be triggered when an application tries to check a malformed DSA public key by the EVP_PKEY_public_check() function. This will most likely lead to an application crash. This function can be called on public keys supplied from untrusted sources which could allow an attacker to cause a denial of service attack. The TLS implementation in OpenSSL does not call this function but applications might call the function if there are additional security requirements imposed by standards such as FIPS 140-3."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-0286",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: X.400 address type confusion in X.509 GeneralName"
              },
              "fullDescription": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing inside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but the public structure definition for GENERAL_NAME incorrectly specified the type of the x400Address field as ASN1_TYPE. This field is subsequently interpreted by the OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an ASN1_STRING. When CRL checking is enabled (i.e. the application sets the X509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass arbitrary pointers to a memcmp call, enabling them to read memory contents or enact a denial of service. In most cases, the attack requires the attacker to provide both the certificate chain and CRL, neither of which need to have a valid signature. If the attacker only controls one of these inputs, the other input must already contain an X.400 address as a CRL distribution point, which is uncommon. As such, this vulnerability is most likely to only affect applications which have implemented their own functionality for retrieving CRLs over a network."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-0286",
              "help": {
                "text": "Vulnerability CVE-2023-0286\nSeverity: HIGH\nPackage: libssl3\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0286](https://avd.aquasec.com/nvd/cve-2023-0286)\nThere is a type confusion vulnerability relating to X.400 address processing inside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but the public structure definition for GENERAL_NAME incorrectly specified the type of the x400Address field as ASN1_TYPE. This field is subsequently interpreted by the OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an ASN1_STRING. When CRL checking is enabled (i.e. the application sets the X509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass arbitrary pointers to a memcmp call, enabling them to read memory contents or enact a denial of service. In most cases, the attack requires the attacker to provide both the certificate chain and CRL, neither of which need to have a valid signature. If the attacker only controls one of these inputs, the other input must already contain an X.400 address as a CRL distribution point, which is uncommon. As such, this vulnerability is most likely to only affect applications which have implemented their own functionality for retrieving CRLs over a network.",
                "markdown": "**Vulnerability CVE-2023-0286**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libssl3|3.0.8-r0|[CVE-2023-0286](https://avd.aquasec.com/nvd/cve-2023-0286)|\n\nThere is a type confusion vulnerability relating to X.400 address processing inside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but the public structure definition for GENERAL_NAME incorrectly specified the type of the x400Address field as ASN1_TYPE. This field is subsequently interpreted by the OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an ASN1_STRING. When CRL checking is enabled (i.e. the application sets the X509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass arbitrary pointers to a memcmp call, enabling them to read memory contents or enact a denial of service. In most cases, the attack requires the attacker to provide both the certificate chain and CRL, neither of which need to have a valid signature. If the attacker only controls one of these inputs, the other input must already contain an X.400 address as a CRL distribution point, which is uncommon. As such, this vulnerability is most likely to only affect applications which have implemented their own functionality for retrieving CRLs over a network."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-0401",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: NULL dereference during PKCS7 data verification"
              },
              "fullDescription": {
                "text": "A NULL pointer can be dereferenced when signatures are being verified on PKCS7 signed or signedAndEnveloped data. In case the hash algorithm used for the signature is known to the OpenSSL library but the implementation of the hash algorithm is not available the digest initialization will fail. There is a missing check for the return value from the initialization function which later leads to invalid usage of the digest API most likely leading to a crash. The unavailability of an algorithm can be caused by using FIPS enabled configuration of providers or more commonly by not loading the legacy provider. PKCS7 data is processed by the SMIME library calls and also by the time stamp (TS) library calls. The TLS implementation in OpenSSL does not call these functions however third party applications would be affected if they call these functions to verify signatures on untrusted data."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-0401",
              "help": {
                "text": "Vulnerability CVE-2023-0401\nSeverity: HIGH\nPackage: libssl3\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0401](https://avd.aquasec.com/nvd/cve-2023-0401)\nA NULL pointer can be dereferenced when signatures are being verified on PKCS7 signed or signedAndEnveloped data. In case the hash algorithm used for the signature is known to the OpenSSL library but the implementation of the hash algorithm is not available the digest initialization will fail. There is a missing check for the return value from the initialization function which later leads to invalid usage of the digest API most likely leading to a crash. The unavailability of an algorithm can be caused by using FIPS enabled configuration of providers or more commonly by not loading the legacy provider. PKCS7 data is processed by the SMIME library calls and also by the time stamp (TS) library calls. The TLS implementation in OpenSSL does not call these functions however third party applications would be affected if they call these functions to verify signatures on untrusted data.",
                "markdown": "**Vulnerability CVE-2023-0401**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libssl3|3.0.8-r0|[CVE-2023-0401](https://avd.aquasec.com/nvd/cve-2023-0401)|\n\nA NULL pointer can be dereferenced when signatures are being verified on PKCS7 signed or signedAndEnveloped data. In case the hash algorithm used for the signature is known to the OpenSSL library but the implementation of the hash algorithm is not available the digest initialization will fail. There is a missing check for the return value from the initialization function which later leads to invalid usage of the digest API most likely leading to a crash. The unavailability of an algorithm can be caused by using FIPS enabled configuration of providers or more commonly by not loading the legacy provider. PKCS7 data is processed by the SMIME library calls and also by the time stamp (TS) library calls. The TLS implementation in OpenSSL does not call these functions however third party applications would be affected if they call these functions to verify signatures on untrusted data."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-4203",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: read buffer overflow in X.509 certificate verification"
              },
              "fullDescription": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. The read buffer overrun might result in a crash which could lead to a denial of service attack. In theory it could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext) although we are not aware of any working exploit leading to memory contents disclosure as of the time of release of this advisory. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-4203",
              "help": {
                "text": "Vulnerability CVE-2022-4203\nSeverity: MEDIUM\nPackage: libssl3\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4203](https://avd.aquasec.com/nvd/cve-2022-4203)\nA read buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. The read buffer overrun might result in a crash which could lead to a denial of service attack. In theory it could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext) although we are not aware of any working exploit leading to memory contents disclosure as of the time of release of this advisory. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "**Vulnerability CVE-2022-4203**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|libssl3|3.0.8-r0|[CVE-2022-4203](https://avd.aquasec.com/nvd/cve-2022-4203)|\n\nA read buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. The read buffer overrun might result in a crash which could lead to a denial of service attack. In theory it could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext) although we are not aware of any working exploit leading to memory contents disclosure as of the time of release of this advisory. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-4304",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: timing attack in RSA Decryption implementation"
              },
              "fullDescription": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation which could be sufficient to recover a plaintext across a network in a Bleichenbacher style attack. To achieve a successful decryption an attacker would have to be able to send a very large number of trial messages for decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5, RSA-OEAP and RSASVE. For example, in a TLS connection, RSA is commonly used by a client to send an encrypted pre-master secret to the server. An attacker that had observed a genuine connection between a client and a server could use this flaw to send trial messages to the server and record the time taken to process them. After a sufficiently large number of messages the attacker could recover the pre-master secret used for the original connection and thus be able to decrypt the application data sent over that connection."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-4304",
              "help": {
                "text": "Vulnerability CVE-2022-4304\nSeverity: MEDIUM\nPackage: libssl3\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4304](https://avd.aquasec.com/nvd/cve-2022-4304)\nA timing based side channel exists in the OpenSSL RSA Decryption implementation which could be sufficient to recover a plaintext across a network in a Bleichenbacher style attack. To achieve a successful decryption an attacker would have to be able to send a very large number of trial messages for decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5, RSA-OEAP and RSASVE. For example, in a TLS connection, RSA is commonly used by a client to send an encrypted pre-master secret to the server. An attacker that had observed a genuine connection between a client and a server could use this flaw to send trial messages to the server and record the time taken to process them. After a sufficiently large number of messages the attacker could recover the pre-master secret used for the original connection and thus be able to decrypt the application data sent over that connection.",
                "markdown": "**Vulnerability CVE-2022-4304**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|libssl3|3.0.8-r0|[CVE-2022-4304](https://avd.aquasec.com/nvd/cve-2022-4304)|\n\nA timing based side channel exists in the OpenSSL RSA Decryption implementation which could be sufficient to recover a plaintext across a network in a Bleichenbacher style attack. To achieve a successful decryption an attacker would have to be able to send a very large number of trial messages for decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5, RSA-OEAP and RSASVE. For example, in a TLS connection, RSA is commonly used by a client to send an encrypted pre-master secret to the server. An attacker that had observed a genuine connection between a client and a server could use this flaw to send trial messages to the server and record the time taken to process them. After a sufficiently large number of messages the attacker could recover the pre-master secret used for the original connection and thus be able to decrypt the application data sent over that connection."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            }
          ],
          "version": "0.37.2"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-1304",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Package: libcom_err\nInstalled Version: 1.46.5-r4\nVulnerability CVE-2022-1304\nSeverity: HIGH\nFixed Version: 1.46.6-r0\nLink: [CVE-2022-1304](https://avd.aquasec.com/nvd/cve-2022-1304)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcom_err@1.46.5-r4"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3996",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2022-3996\nSeverity: HIGH\nFixed Version: 3.0.7-r2\nLink: [CVE-2022-3996](https://avd.aquasec.com/nvd/cve-2022-3996)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2022-4450\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4450](https://avd.aquasec.com/nvd/cve-2022-4450)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0215\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0215](https://avd.aquasec.com/nvd/cve-2023-0215)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0216\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0216](https://avd.aquasec.com/nvd/cve-2023-0216)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0217\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0217](https://avd.aquasec.com/nvd/cve-2023-0217)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0286\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0286](https://avd.aquasec.com/nvd/cve-2023-0286)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0401\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0401](https://avd.aquasec.com/nvd/cve-2023-0401)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2022-4203\nSeverity: MEDIUM\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4203](https://avd.aquasec.com/nvd/cve-2022-4203)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Package: libcrypto3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2022-4304\nSeverity: MEDIUM\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4304](https://avd.aquasec.com/nvd/cve-2022-4304)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libcrypto3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3996",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2022-3996\nSeverity: HIGH\nFixed Version: 3.0.7-r2\nLink: [CVE-2022-3996](https://avd.aquasec.com/nvd/cve-2022-3996)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2022-4450\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4450](https://avd.aquasec.com/nvd/cve-2022-4450)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0215\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0215](https://avd.aquasec.com/nvd/cve-2023-0215)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0216\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0216](https://avd.aquasec.com/nvd/cve-2023-0216)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0217\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0217](https://avd.aquasec.com/nvd/cve-2023-0217)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0286\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0286](https://avd.aquasec.com/nvd/cve-2023-0286)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2023-0401\nSeverity: HIGH\nFixed Version: 3.0.8-r0\nLink: [CVE-2023-0401](https://avd.aquasec.com/nvd/cve-2023-0401)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2022-4203\nSeverity: MEDIUM\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4203](https://avd.aquasec.com/nvd/cve-2022-4203)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Package: libssl3\nInstalled Version: 3.0.7-r0\nVulnerability CVE-2022-4304\nSeverity: MEDIUM\nFixed Version: 3.0.8-r0\nLink: [CVE-2022-4304](https://avd.aquasec.com/nvd/cve-2022-4304)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ortelius/ms-scorecard",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "ortelius/ms-scorecard: libssl3@3.0.7-r0"
              }
            }
          ]
        }
      ],
      "columnKind": "utf16CodeUnits",
      "originalUriBaseIds": {
        "ROOTPATH": {
          "uri": "file:///"
        }
      }
    }
  ]
}